#ifndef _SAMPLES_H
#define _SAMPLES_H

#include <stdint.h>

// Smallest possible EXIB datum, an empty root object.
static const uint8_t Sample_EmptyRoot[] = {
    0xe4, 0x1b, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xD7, 0xF7, 0xBF, 0x31,
    0x0f, 0x00, 0x00, 0x00 // Root Object, unnamed, 0 bytes
};

// A devilishly crafted datum with just about everything wrong with it.
static const uint8_t Sample_InvalidRoot[] = {
    0xe4, 0x1b, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x13, 0x74, 0x64, 0x75,
    0xFF, 0xFF, 0xFF, 0xFF, 0xDE, 0xAD
};

// Simple datum with two uint32 fields and one uint16.
static const uint8_t Sample_Numbers[] = {
    0xE4, 0x1B, 0x01, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0xCD, 0x31, 0x77, 0x61,
    0x0F, 0x00, 0x16, 0x00, // Root object
    0x36, 0x00, 0x00, 0x00,
    0xEF, 0xBE, 0xAD, 0xDE,  // a:u32 = 0xDEADBEEF
    0x36, 0x02, 0x00, 0x00,
    0xBE, 0xBA, 0xFE, 0xCA, // b:u32 = 0xCAFEBABE
    0x34, 0x04, 0x00, 0x00,
    0x01, 0xC0,                       // c:u16 = 0xC001
    0x01, 0x61, 0x01, 0x62, 0x01, 0x63 // String table
};

// Datum with various numbers and nested objects.
static const uint8_t Sample_NumbersAndObjects[] = {
    0xE4, 0x1B, 0x01, 0x00, 0x77, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x07, 0x80, 0x33, 0x9A,
    0x0F, 0x00, 0x40, 0x00,
    0x36, 0x00, 0x00, 0x00,
    0xEF, 0xBE, 0xAD, 0xDE,
    0x36, 0x02, 0x00, 0x00,
    0xBE, 0xBA, 0xFE, 0xCA,
    0x11, 0x04, 0x00, 0x64,
    0x1F, 0x06, 0x00, 0x00, 0x06, 0x00, 0x1F, 0x16,
    0x00, 0x00, 0x00, 0x00, 0x1F, 0x0E, 0x00, 0x00, 0x1A, 0x00, 0x79, 0x1D,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0x39, 0x1F, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3F, 0x39, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x01, 0x61, 0x01, 0x62, 0x01, 0x63, 0x07, 0x6F, 0x62, 0x6A, 0x65, 0x63,
    0x74, 0x31, 0x07, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x32, 0x06, 0x6E,
    0x65, 0x73, 0x74, 0x65, 0x64, 0x01, 0x78, 0x01, 0x79, 0x01, 0x7A
};

static const uint8_t Sample_Array[] = {
    0xE4, 0x1B, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x18, 0x76, 0xB4, 0xB0,
    0x0F, 0x00, 0x28, 0x00, 0x5E, 0x00, 0x00, 0x09,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x40,
    0x00, 0x00, 0xA0, 0x40, 0x00, 0x00, 0xC0, 0x40, 0x00, 0x00, 0xE0, 0x40,
    0x05, 0x61, 0x72, 0x72, 0x61, 0x79
};

static const uint8_t Sample_ArrayOfArrays[] = {
    0xE4, 0x1B, 0x01, 0x00, 0x4A, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0xB8, 0x74, 0x3F, 0x93,
    0x0F, 0x00, 0x30, 0x00,
    0x1E, 0x00, 0x00, 0x0E, 0x2A, 0x00, // array:[array]
    0x4E, 0x06, 0x10, 0x00, 0x00, 0x00, //   [0]:[u32]
    0xEF, 0xBE, 0xAD, 0xDE, //      [0]:u32 = 0xDEADBEEF
    0xEF, 0xBE, 0xAD, 0xDE, //      [1]:u32 = 0xDEADBEEF
    0xEF, 0xBE, 0xAD, 0xDE, //      [2]:u32 = 0xDEADBEEF
    0xEF, 0xBE, 0xAD, 0xDE, //      [3]:u32 = 0xDEADBEEF
    0x0E, 0x09, 0x10, 0x00, //   [1]:[float]
    0x00, 0x00, 0x80, 0x3F, //      [0]:float = 1.0
    0x00, 0x00, 0x00, 0x40, //      [1]:float = 2.0
    0x00, 0x00, 0x40, 0x40, //      [2]:float = 3.0
    0x00, 0x00, 0x80, 0x40, //      [3]:float = 4.0
    0x05, 0x61, 0x72, 0x72, 0x61, 0x79
};


#endif //_SAMPLES_H
